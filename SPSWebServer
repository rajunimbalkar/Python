#!/usr/bin/python
from flask import Flask, jsonify, abort, make_response, request, url_for
from flask_httpauth import HTTPBasicAuth
auth = HTTPBasicAuth()

@auth.get_password
def get_password(username):
    if username == 'Test':
        return 'Password'
    return None

@auth.error_handler
def unauthorized():
    return make_response(jsonify({'error': 'Unauthorized access'}), 401)

app = Flask(__name__, static_url_path = "")

jobs = [
    {
        'job_id': 1,
        'start_time': u'23 Nov 2016',
        'end_time': u'23 Nov 2016',
        'roll_count':'101',
        'ip':'127.0.0.1',
        'state':"pending",
        'analysis': 'unknown'
    },
    {
        'job_id': 2,
        'start_time': u'25 Nov 2016',
        'end_time': u'25 Nov 2016',
        'roll_count':'111',
        'ip':'127.0.0.1',
        'state':"pending",
        'analysis': 'unknown'
    }
]

def make_public_task(job):
    new_job = {}
    new_task['job_id'] = tasks[-1]['job_id']+1
    for field in job:
            new_task[field] = task[field]
    return new_task


@app.errorhandler(404)
def not_found(error):
    return make_response(jsonify({'error': 'Not found'}), 404)

@app.route('/sps/filacam/v1/CurrState', methods=['POST'])
@auth.login_required
def post_currentstate():
    job = request.json;
    if not 'job_id' in job:
        abort(400)
    for currjob in jobs:
        if currjob['job_id'] == job['job_id']:
            currjob['state'] = job['state'];
    return jsonify(currjob)


@app.route('/sps/filacam/v1/IP', methods=['POST'])
@auth.login_required
def post_IP():
    if not request.json or not 'ip' in request.json:
        abort(400)
    job = request.json;

return jsonify({'JOB': 'Qued up'})

@app.route('/sps/filacam/v1/jobs', methods=['GET'])
def get_jobs():
    fromJob = request.args.get('from');
    toJob = request.args.get('to');
    if len(fromJob) == 0 or len(toJob) == 0:
        abort(404)
    

    return jsonify({'job': "Test"})

@app.route('/sps/filacam/v1/analysis', methods=['POST'])
def create_task():
    if not request.json or not 'title' in request.json:
        abort(400)
    task = make_public_task()
    tasks.append(task)
    return jsonify({'task': task}), 201

if __name__ == '__main__':
    app.run(debug=True)
